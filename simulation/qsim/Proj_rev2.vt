// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2024 20:22:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Proj_rev2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Proj_rev2_vlg_sample_tst(
	clk,
	pinReset,
	pinRun,
	pinSensor,
	sampler_tx
);
input  clk;
input  pinReset;
input  pinRun;
input  pinSensor;
output sampler_tx;

reg sample;
time current_time;
always @(clk or pinReset or pinRun or pinSensor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Proj_rev2_vlg_check_tst (
	pinBuzzer,
	pinledAmarelo,
	pinledVerde,
	pinledVermelho,
	pinMotor,
	sampler_rx
);
input  pinBuzzer;
input  pinledAmarelo;
input  pinledVerde;
input  pinledVermelho;
input  pinMotor;
input sampler_rx;

reg  pinBuzzer_expected;
reg  pinledAmarelo_expected;
reg  pinledVerde_expected;
reg  pinledVermelho_expected;
reg  pinMotor_expected;

reg  pinBuzzer_prev;
reg  pinledAmarelo_prev;
reg  pinledVerde_prev;
reg  pinledVermelho_prev;
reg  pinMotor_prev;

reg  pinBuzzer_expected_prev;
reg  pinledAmarelo_expected_prev;
reg  pinledVerde_expected_prev;
reg  pinledVermelho_expected_prev;
reg  pinMotor_expected_prev;

reg  last_pinBuzzer_exp;
reg  last_pinledAmarelo_exp;
reg  last_pinledVerde_exp;
reg  last_pinledVermelho_exp;
reg  last_pinMotor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	pinBuzzer_prev = pinBuzzer;
	pinledAmarelo_prev = pinledAmarelo;
	pinledVerde_prev = pinledVerde;
	pinledVermelho_prev = pinledVermelho;
	pinMotor_prev = pinMotor;
end

// update expected /o prevs

always @(trigger)
begin
	pinBuzzer_expected_prev = pinBuzzer_expected;
	pinledAmarelo_expected_prev = pinledAmarelo_expected;
	pinledVerde_expected_prev = pinledVerde_expected;
	pinledVermelho_expected_prev = pinledVermelho_expected;
	pinMotor_expected_prev = pinMotor_expected;
end



// expected pinBuzzer
initial
begin
	pinBuzzer_expected = 1'bX;
end 

// expected pinledAmarelo
initial
begin
	pinledAmarelo_expected = 1'bX;
end 

// expected pinledVerde
initial
begin
	pinledVerde_expected = 1'bX;
end 

// expected pinledVermelho
initial
begin
	pinledVermelho_expected = 1'bX;
end 

// expected pinMotor
initial
begin
	pinMotor_expected = 1'bX;
end 
// generate trigger
always @(pinBuzzer_expected or pinBuzzer or pinledAmarelo_expected or pinledAmarelo or pinledVerde_expected or pinledVerde or pinledVermelho_expected or pinledVermelho or pinMotor_expected or pinMotor)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pinBuzzer = %b | expected pinledAmarelo = %b | expected pinledVerde = %b | expected pinledVermelho = %b | expected pinMotor = %b | ",pinBuzzer_expected_prev,pinledAmarelo_expected_prev,pinledVerde_expected_prev,pinledVermelho_expected_prev,pinMotor_expected_prev);
	$display("| real pinBuzzer = %b | real pinledAmarelo = %b | real pinledVerde = %b | real pinledVermelho = %b | real pinMotor = %b | ",pinBuzzer_prev,pinledAmarelo_prev,pinledVerde_prev,pinledVermelho_prev,pinMotor_prev);
`endif
	if (
		( pinBuzzer_expected_prev !== 1'bx ) && ( pinBuzzer_prev !== pinBuzzer_expected_prev )
		&& ((pinBuzzer_expected_prev !== last_pinBuzzer_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinBuzzer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinBuzzer_expected_prev);
		$display ("     Real value = %b", pinBuzzer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinBuzzer_exp = pinBuzzer_expected_prev;
	end
	if (
		( pinledAmarelo_expected_prev !== 1'bx ) && ( pinledAmarelo_prev !== pinledAmarelo_expected_prev )
		&& ((pinledAmarelo_expected_prev !== last_pinledAmarelo_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinledAmarelo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinledAmarelo_expected_prev);
		$display ("     Real value = %b", pinledAmarelo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pinledAmarelo_exp = pinledAmarelo_expected_prev;
	end
	if (
		( pinledVerde_expected_prev !== 1'bx ) && ( pinledVerde_prev !== pinledVerde_expected_prev )
		&& ((pinledVerde_expected_prev !== last_pinledVerde_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinledVerde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinledVerde_expected_prev);
		$display ("     Real value = %b", pinledVerde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pinledVerde_exp = pinledVerde_expected_prev;
	end
	if (
		( pinledVermelho_expected_prev !== 1'bx ) && ( pinledVermelho_prev !== pinledVermelho_expected_prev )
		&& ((pinledVermelho_expected_prev !== last_pinledVermelho_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinledVermelho :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinledVermelho_expected_prev);
		$display ("     Real value = %b", pinledVermelho_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pinledVermelho_exp = pinledVermelho_expected_prev;
	end
	if (
		( pinMotor_expected_prev !== 1'bx ) && ( pinMotor_prev !== pinMotor_expected_prev )
		&& ((pinMotor_expected_prev !== last_pinMotor_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinMotor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinMotor_expected_prev);
		$display ("     Real value = %b", pinMotor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pinMotor_exp = pinMotor_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Proj_rev2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg pinReset;
reg pinRun;
reg pinSensor;
// wires                                               
wire pinBuzzer;
wire pinledAmarelo;
wire pinledVerde;
wire pinledVermelho;
wire pinMotor;

wire sampler;                             

// assign statements (if any)                          
Proj_rev2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.pinBuzzer(pinBuzzer),
	.pinledAmarelo(pinledAmarelo),
	.pinledVerde(pinledVerde),
	.pinledVermelho(pinledVermelho),
	.pinMotor(pinMotor),
	.pinReset(pinReset),
	.pinRun(pinRun),
	.pinSensor(pinSensor)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// pinReset
initial
begin
	pinReset = 1'b0;
end 

// pinRun
initial
begin
	pinRun = 1'b0;
	pinRun = #100000 1'b1;
	pinRun = #80000 1'b0;
end 

// pinSensor
initial
begin
	pinSensor = 1'b0;
end 

Proj_rev2_vlg_sample_tst tb_sample (
	.clk(clk),
	.pinReset(pinReset),
	.pinRun(pinRun),
	.pinSensor(pinSensor),
	.sampler_tx(sampler)
);

Proj_rev2_vlg_check_tst tb_out(
	.pinBuzzer(pinBuzzer),
	.pinledAmarelo(pinledAmarelo),
	.pinledVerde(pinledVerde),
	.pinledVermelho(pinledVermelho),
	.pinMotor(pinMotor),
	.sampler_rx(sampler)
);
endmodule

